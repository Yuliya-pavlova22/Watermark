type: edu
files:
- name: src/watermark/Main.kt
  visible: true
  text: |
    package watermark
    import org.cef.CefSettings.ColorType
    import org.w3c.dom.css.RGBColor
    import java.io.File
    import javax.imageio.ImageIO
    import java.awt.image.BufferedImage
    import java.awt.Color
    import java.lang.Exception
    import java.lang.RuntimeException
    import kotlin.system.exitProcess
    import kotlin.io.path.Path
    import kotlin.io.path.fileSize

    public  class Image {
        var file = ""
        var width = 0
        var height = 0
        var numCom = 0
        var numColCom = 0
        var bits = 0
        var tranc = ""
    }
    public val trnsprenc = mapOf<Int, String>(1 to "OPAQUE", 2 to "BITMASK", 3 to "TRANSLUCENT")

    fun main() = try {
        val myImage: BufferedImage = CreateInputImg()
        val myWatermark: BufferedImage = CreateWaterImg()

    //проверяем размеры изображений
        СompSize(myImage,myWatermark)

        // использовать альфа-канал?
        var isTrans = false
        // a transparency color?
        var isTransColor = false

        if (trnsprenc.get(myWatermark.transparency).toString() == "TRANSLUCENT") {
            println("Do you want to use the watermark's Alpha channel?")
            isTrans = readln().lowercase() == "yes"
        } else {
            println("Do you want to set a transparency color?")
            isTransColor = readln().lowercase() == "yes"
        }
        //
        val trColor: Color = CreatetrColor(isTransColor)

        val trancPerc = CreatePercent()

        val singMetod = IsSingleMetod()

        var positionList: List<String> = listOf("","")
        if (singMetod) {
            positionList = Position(myImage,myWatermark)
            //println(positionList)
        }


        // создание файла  и наложение водяного знака
        val myImageOut: BufferedImage = CreateOutImg(myImage, myWatermark, isTrans, isTransColor, trancPerc, trColor, positionList, singMetod)

    }
    catch (ex: RuntimeException) {
        println(ex.message)
    }

    fun Position(myImage: BufferedImage, myWatermark: BufferedImage): List<String> {
        val difX = myImage.width - myWatermark.width
        val difY = myImage.height - myWatermark.height
        println("Input the watermark position ([x 0-$difX] [y 0-$difY]):")
        var strMetod = readln()!!.split(" ")
        if (strMetod.lastIndex == 1) {
            if (isDig(strMetod[0]) && isDig(strMetod[1])) {
                    if (strMetod[0].toInt() in 0..difX && strMetod[1].toInt() in 0..difY) {
                        val posX = strMetod[0].toInt()
                        val posy = strMetod[1].toInt()
                    } else {
                        throw RuntimeException("The position input is out of range.")
                    }
                } else {
                    throw RuntimeException("The position method input is invalid.")
                }
    } else {
            throw RuntimeException("The position method input is invalid.")
        }
        return strMetod
    }

    // true - single
    // false - grid
    fun IsSingleMetod(): Boolean {
        println("Choose the position method (single, grid):")
        val strPos = readln()!!
        var pos =  if (strPos.lowercase() == "single") true
        else
            if (strPos.lowercase() == "grid") false
            else {
            throw RuntimeException("The position method input is invalid.")
            }
        return pos
    }

    fun СompSize(myImage: BufferedImage, myWatermark: BufferedImage) {
        if (myWatermark.width <= myImage.width && myWatermark.height <= myImage.height){
            return
        } else {
            throw RuntimeException("The watermark's dimensions are larger.")
        }

    }

    fun CreateOutImg(myImage: BufferedImage,
                     myWatermark: BufferedImage,
                     isTrans: Boolean,
                     isTransColor: Boolean,
                     trancPerc: Int,
                     trColor: Color,
                     positionList: List<String>,
                     singMetod : Boolean): BufferedImage {
        println("Input the output image filename (jpg or png extension):")
        val outImg = readln()!!
        var formatImg = ""
        if (checkFormat(outImg)) {
            formatImg = outImg.substring(outImg.indexOf('.') + 1)
            // println(formatImg)
        } else {
            throw RuntimeException("The output file extension isn't \"jpg\" or \"png\".")

        }
        val myImageOutf: BufferedImage = BufferedImage(myImage.width, myImage.height, BufferedImage.TYPE_INT_RGB)
        val posX = positionList[0].toInt()
        val posY = positionList[1].toInt()

        for (x in 0 until myImageOutf.width) {
            for (y in 0 until myImageOutf.height) {
                var w: Color = Color(myWatermark.getRGB(x, y), isTrans)
                var i: Color = Color(myImage.getRGB(x, y), isTrans)
                if (singMetod){
                    if (x in posX..posX + myWatermark.width && y in posY..posY + myWatermark.height)
                    w = Color(myWatermark.getRGB(x - posX, y - posY ))
                } else {
                    w = Color(myWatermark.getRGB(x * myWatermark.width/100, y * myWatermark.height/100))
                }

                val color =
                    if (w == trColor && isTransColor) {
                        Color(
                            i.red,
                            i.green,
                            i.blue
                        )
                    } else
                        Color(
                            (trancPerc * w.red + (100 - trancPerc) * i.red) / 100,
                            (trancPerc * w.green + (100 - trancPerc) * i.green) / 100,
                            (trancPerc * w.blue + (100 - trancPerc) * i.blue) / 100
                        )
                myImageOutf.setRGB(x, y, (if (isTrans && w.alpha == 0) i else color).rgb)
            }
        }


        val outputFileJpg = File(outImg)  // Output the file
        ImageIO.write(myImageOutf, formatImg, outputFileJpg)
        println("The watermarked image $outImg has been created.")

        return  myImageOutf
    }


    fun CreatePercent(): Int {
        println("Input the watermark transparency percentage (Integer 0-100):")
        val strPerc = readln()!!
        if (!isDig(strPerc)) {
            throw RuntimeException("The transparency percentage isn't an integer number.")

        }

        val trancPercf = strPerc.toInt()
        if (trancPercf !in 0..100) {
            throw RuntimeException("The transparency percentage is out of range.")
        }
        return  trancPercf
    }

    fun CreatetrColor(isTransColor: Boolean): Color {
        var trColorf = Color(0,0,0)
        if (isTransColor) {
            println("Input a transparency color ([Red] [Green] [Blue]):")
            val strTrColor = readln()!!

            if (checkTrColor(strTrColor)) {
                var trColorstr = strTrColor.split(" ").map { it.toInt() }
                // println(trColorstr)
                trColorf = Color(trColorstr[0], trColorstr[1], trColorstr[2])
            } else throw RuntimeException("The transparency color input is invalid.")

        }
        return  trColorf
    }

    fun CreateWaterImg(): BufferedImage {
        println("Input the watermark image filename:")
        val str2 = readln()!!
        val inputFileWater = File(str2)


        if (!inputFileWater.exists()) {
            throw RuntimeException("The file $str2 doesn't exist.")
        }
        val myWatermarkf: BufferedImage = ImageIO.read(inputFileWater)

        if (checkNumCol(myWatermarkf)) {
            throw RuntimeException("The number of watermark color components isn't 3.")

        }
        // создаем экземпляр класса для изображения водяного знака
        var watermark = Image()
        watermark = properties(watermark, myWatermarkf, str2)

        if (checkBits(myWatermarkf)) {
            throw RuntimeException("The watermark isn't 24 or 32-bit.")

        }
        return myWatermarkf

    }

    fun CreateInputImg(): BufferedImage {
        println("Input the image filename:")
        var str = readln()!!
        var inputFile: File = File(str)

        if (!inputFile.exists()){
            throw RuntimeException("The file $str doesn't exist.")
        }
        var myImagef: BufferedImage
        myImagef= ImageIO.read(inputFile)
        // создаем экземпляр класса для входящего изображения
        var inputImg = Image()
        inputImg = properties(inputImg, myImagef, str)

        if (checkNumCol(myImagef)) {
            throw RuntimeException("The number of image color components isn't 3.")
        }

        if (checkBits(myImagef)) {
            throw RuntimeException("The image isn't 24 or 32-bit.")
        }
        return  myImagef
    }


    //проверка на цвета
    fun checkTrColor(str: String): Boolean {
        var rezult = true
        str.trim()
        val rgb = str.split(" ")
       // println(rgb.joinToString())
        if (rgb.lastIndex == 2) {
        for (i in rgb) {
            rezult = rezult && if (isDig(i)) {
                if (i.toInt() in 0..255) rezult
                else false
            } else false
        }
        } else rezult = false
        return  rezult
    }

    // присвоение свойств изображения для экземпляра класса
    fun properties(img: Image, imgFile: BufferedImage, str : String): Image {
        var trnsprenc = mapOf<Int, String>(1 to "OPAQUE", 2 to "BITMASK", 3 to "TRANSLUCENT")
        img.file = str
        img.width = imgFile.width
        img.height = imgFile.height
        img.numCom = imgFile.colorModel.numComponents
        img.numColCom = imgFile.colorModel.numColorComponents
        img.bits = imgFile.colorModel.pixelSize
        img.tranc = trnsprenc.get(imgFile.transparency).toString()
        return  img
    }

    // проверка на 3-х цветные компоненты
    fun checkNumCol(inputImg : BufferedImage): Boolean {
        return  inputImg.colorModel.numColorComponents != 3
    }
    //не является 24-битным или 32-битным
    fun checkBits(inputImg : BufferedImage): Boolean {
        return  inputImg.colorModel.pixelSize != 24 && inputImg.colorModel.pixelSize != 32
    }
    //проверка на числа
    fun isDig(str: String) : Boolean {
        var rezult = true
        str.forEach { rezult = rezult && it.isDigit() }
        return  rezult
    }

    fun checkFormat(str: String): Boolean {
        if ( ".jpg" !in str || ".png" !in str) {
            val index = str.indexOf('.')
            val dif = str.lastIndex - index
            return dif == 3 && (str.substring(index + 1) == "jpg" || str.substring(index + 1) == "png")
        } else return false
    }

    fun printInfo(filename: String, bi: BufferedImage) {
        println("Image file: $filename")

        println("Width: ${bi.width}")
        println("Height: ${bi.height}")
        println("Number of components: ${bi.colorModel.numComponents}")
        println("Number of color components: ${bi.colorModel.numColorComponents}")
        println("Bits per pixel: ${bi.colorModel.pixelSize}")
       // println("Transparency: ${getTransparency(bi.transparency)}")

    }
  learner_created: false
- name: test/70x50.png
  visible: false
  learner_created: false
- name: test/bits16.png
  visible: false
  learner_created: false
- name: test/grey.png
  visible: false
  learner_created: false
- name: test/image5.png
  visible: false
  learner_created: false
- name: test/logorgb.png
  visible: false
  learner_created: false
- name: test/logorgba.png
  visible: false
  learner_created: false
- name: test/tall.png
  visible: false
  learner_created: false
- name: test/WatermarkTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import javax.imageio.ImageIO
    import kotlin.math.abs

    class CardGameTest : StageTest<Any>() {

        @DynamicTest(order = 1)
        fun imageNotExistTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            outputString = main.execute("test${File.separator}notexist.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The file test${File.separator}notexist.png doesn't exist.".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Incorrect output, when a non existing filename was input.")

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun imageColorCompLess3Test5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}grey.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}grey.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The number of image color components isn't 3.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an image that doesn't have 3 color components was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun imageBitsPerPixelTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}bits16.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}bits16.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The image isn't 24 or 32-bit.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an image with no 24 or 32 bits per pixel was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun watermarkNotExistTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}image5.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}notexist.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The file test${File.separator}notexist.png doesn't exist.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a non existing watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun watermarkColorCompLess3Test5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}grey.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}grey.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The number of watermark color components isn't 3.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a watermark that doesn't have 3 color components was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun watermarkBitsPerPixelTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}bits16.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}bits16.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark isn't 24 or 32-bit.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a watermark with no 24 or 32 bits per pixel was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun wideWatermarkTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}wide.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}wide.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark's dimensions are larger.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the watermark image is wider than the original image."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun tallWatermarkTest5(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}tall.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}tall.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark's dimensions are larger.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the watermark image is taller than the original image."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 9)
        fun invalidPositionMethodTest5(): CheckResult {
            val posMethodInputs = listOf("pos", "0 0", "top")
            for (posMethodInput in posMethodInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image5.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}logorgb.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute("0 0 0").trim().lowercase()
                position =
                    checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a transparent color input."
                )

                outputString = main.execute("20").trim().lowercase()
                position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the transparency percentage was input."
                )

                outputString = main.execute(posMethodInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The position method input is invalid.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong input position method."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 10)
        fun invalidPositionTest5(): CheckResult {
            val posInputs = listOf("top", "up right", "100-100")
            for (posInput in posInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image5.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}logorgb.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute("0 0 0").trim().lowercase()
                position =
                    checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a transparent color input."
                )

                outputString = main.execute("20").trim().lowercase()
                position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the transparency percentage was input."
                )

                outputString = main.execute("single").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong input position method."
                )

                outputString = main.execute(posInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The position input is invalid.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong position input."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 11)
        fun outOfRangeTest5(): CheckResult {
            val posInputs = listOf("-1 300", "301 600", "0 -1", "0 601")
            for (posInput in posInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image5.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}logorgb.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute("0 0 0").trim().lowercase()
                position =
                    checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a transparent color input."
                )

                outputString = main.execute("20").trim().lowercase()
                position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when the transparency percentage was input."
                )

                outputString = main.execute("single").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after wrong input position method."
                )

                outputString = main.execute(posInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The position input is out of range.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after input out of range position."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 12)
        fun gridPositionUsingTransparencyTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out1.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgb.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("0 0 0").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after a transparent color input."
            )

            outputString = main.execute("15").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("grid").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("test${File.separator}out1.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out1.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out1.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileTransparencyColorGridS5(15, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgb.png", "test${File.separator}out1.png", Color(0, 0, 0)))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 13)
        fun gridPositionAlphaChannelTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out2.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgba.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgba.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to use the watermark's Alpha channel?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("25").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("grid").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("test${File.separator}out2.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out2.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out2.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileAlphaChannelGridS5(25, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgba.png", "test${File.separator}out2.png"))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 14)
        fun singlePositionUsingTransparencyTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out3.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgb.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgb.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("0 0 0").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after a transparent color input."
            )

            outputString = main.execute("35").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("single").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("200 200").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position input."
            )

            outputString = main.execute("test${File.separator}out3.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out3.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out3.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileTransparencyColorSingleS5(35, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgb.png", "test${File.separator}out3.png", Color(0, 0, 0),
                    200, 200))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 15)
        fun singlePositionAlphaChannelTest5(): CheckResult {
            try {
                val outFile = File("test${File.separator}out4.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image5.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}logorgba.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image5.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}logorgba.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to use the watermark's Alpha channel?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("50").trim().lowercase()
            position = checkOutput(outputString, 0, "Choose the position method (single, grid):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("single").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark position ([x 0-300] [y 0-600]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position method input."
            )

            outputString = main.execute("300 400").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after the position input."
            )

            outputString = main.execute("test${File.separator}out4.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out4.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out4.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileAlphaChannelSingleS5(50, 50000,
                    "test${File.separator}image5.png", "test${File.separator}logorgba.png", "test${File.separator}out4.png", 300, 400))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }

    fun checkIfCorrectOutputFileAlphaChannelSingleS5(per: Int, err: Long, imageStr: String, watStr: String,
                                                     outStr: String, posX: Int, posY: Int): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val wat = ImageIO.read(watermarkFile)
        val watermark = BufferedImage(image.width, image.height, BufferedImage.TYPE_INT_ARGB)
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val color = if (x in posX until (posX + wat.width) && y in posY until (posY + wat.height))
                    Color(wat.getRGB(x - posX, y - posY), true)
                else Color(0, 0, 0, 0)
                watermark.setRGB(x, y, color.rgb)
            }
        }
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y), true)
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.alpha == 0) {
                    Color(i.red, i.green, i.blue)}
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileTransparencyColorSingleS5(per: Int, err: Long, imageStr: String, watStr: String,
                                                          outStr: String, trColor: Color, posX: Int, posY: Int): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val wat = ImageIO.read(watermarkFile)
        val watermark = BufferedImage(image.width, image.height, BufferedImage.TYPE_INT_RGB)
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val color = if (x in posX until (posX + wat.width) && y in posY until (posY + wat.height))
                    Color(wat.getRGB(x - posX, y - posY))
                else trColor
                watermark.setRGB(x, y, color.rgb)
            }
        }
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y))
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.red == trColor.red && w.green == trColor.green && w.blue == trColor.blue)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileAlphaChannelGridS5(per: Int, err: Long,
                                                   imageStr: String, watStr: String, outStr: String): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x % watermark.width, y % watermark.height), true)
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.alpha == 0)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileTransparencyColorGridS5(per: Int, err: Long,
                                                        imageStr: String, watStr: String, outStr: String, trColor: Color): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x % watermark.width, y % watermark.height))
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.red == trColor.red && w.green == trColor.green && w.blue == trColor.blue)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }


  learner_created: false
- name: test/wide.png
  visible: false
  learner_created: false
- name: test/out1.png
  visible: true
  learner_created: true
- name: test/out2.png
  visible: true
  learner_created: true
- name: test/out4.png
  visible: true
  learner_created: true
- name: test/out3.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/222/stages/1116/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 13 Dec 2022 13:34:07 UTC"
record: 5
